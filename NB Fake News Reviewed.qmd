```{r}
library(tidyverse)
library(class)
library(wordcloud)
library(tm)
library(caret)
library(e1071)
```

## Data Understanding

```{r}
url <- (NB_fakenews)
rawDF <- url
head(rawDF)
```


```{r}
rawDF$label <- factor(rawDF$label, levels = c("0", "1"), labels = c("Real", "Fake")) %>% factor %>% relevel("Fake")
class(rawDF$label)
```

```{r}
Real <- rawDF %>% filter(label == "Real")
Fake <- rawDF %>% filter(label == "Fake")

wordcloud(Real$text, max.words = 20, scale = c(4, 0.8), colors= c("indianred1","indianred2","indianred3","indianred"))
wordcloud(Fake$text, max.words = 20, scale = c(4, 0.8), colors= c("lightsteelblue1","lightsteelblue2","lightsteelblue3","lightsteelblue"))
```


##Preparation
```{r}
rawCorpus <- Corpus(VectorSource(rawDF$text))
inspect(rawCorpus[1:3])

cleanCorpus <- rawCorpus %>% tm_map(tolower) %>% tm_map(removeNumbers)
cleanCorpus <- cleanCorpus %>% tm_map(tolower) %>% tm_map(removeWords, stopwords()) %>% tm_map(removePunctuation)
cleanCorpus <- cleanCorpus %>% tm_map(stripWhitespace)

```
```{r}
tibble(Raw = rawCorpus$content[1:3], Clean = cleanCorpus$content[1:3])
cleanDTM <- cleanCorpus %>% DocumentTermMatrix
inspect(cleanDTM)
```

```{r}
set.seed(1234)
trainIndex <- createDataPartition(rawDF$label, p = .75, 
                                  list = FALSE, 
                                  times = 1)
head(trainIndex)
```

```{r}
trainDF <- rawDF[trainIndex, ]
testDF <- rawDF[-trainIndex, ]


trainCorpus <- cleanCorpus[trainIndex]
testCorpus <- cleanCorpus[-trainIndex]


trainDTM <- cleanDTM[trainIndex, ]
testDTM <- cleanDTM[-trainIndex, ]
```

```{r}
freqWords <- trainDTM %>% findFreqTerms(50)
trainDTM <-  DocumentTermMatrix(trainCorpus, list(dictionary = freqWords))
testDTM <-  DocumentTermMatrix(testCorpus, list(dictionary = freqWords))
```

```{r}
convert_counts <- function(x) {
  x <- ifelse(x > 0, 1, 0) %>% factor(levels = c(0,1), labels = c("No", "Yes"))
}

nColsDTM <- dim(trainDTM)[2]
trainDTM <- apply(trainDTM, MARGIN = 2, convert_counts)
testDTM <- apply(testDTM, MARGIN = 2, convert_counts)

head(trainDTM[,1:10])
```

##Modeling and Evaluation
```{r}
nbayesModel <-  naiveBayes(trainDTM, trainDF$label, laplace = 1)
```

```{r}
predVec <- predict(nbayesModel, testDTM)
confusionMatrix(predVec, testDF$label, positive = "Fake", dnn = c("Prediction", "True"))
```

##Reviewer suggestions
Line 39: "stopwords" should be without quotation marks
Line 51: Add set.seed(1234) in the line above 
Line 52: List = TRUE should be List = FALSE
Line 66 and 67: should be cleanDTM[trainIndex, ] and [-trainIndex ,]
Line 71: Should be trainDTM instead of testDTM
Line 78: Should be ifelse(x > 0, 1, 0) instead of ifelse(x > 1, 0, 1)